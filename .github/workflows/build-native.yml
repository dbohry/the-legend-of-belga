name: Build Native Executables

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build-native-windows:
    name: Build Windows Native Executable
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Native Image
        run: gu install native-image

      - name: Gradle wrapper perms
        run: chmod +x gradlew

      - name: Build Windows Native Executable
        run: ./gradlew nativeCompile

      - name: Rename Windows Executable
        run: |
          copy "build\native\nativeCompile\TheLegendOfBelga.exe" "build\TheLegendOfBelga-Windows.exe"

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TheLegendOfBelga-Windows
          path: build/TheLegendOfBelga-Windows.exe
          retention-days: 30

  build-native-linux:
    name: Build Linux Native Executable
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Native Image
        run: gu install native-image

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libz-dev zlib1g-dev

      - name: Gradle wrapper perms
        run: chmod +x gradlew

      - name: Build Linux Native Executable
        run: ./gradlew nativeCompile

      - name: Rename Linux Executable
        run: |
          cp "build/native/nativeCompile/TheLegendOfBelga" "build/TheLegendOfBelga-Linux"
          chmod +x "build/TheLegendOfBelga-Linux"

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TheLegendOfBelga-Linux
          path: build/TheLegendOfBelga-Linux
          retention-days: 30

  build-native-macos:
    name: Build macOS Native Executable
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Native Image
        run: gu install native-image

      - name: Gradle wrapper perms
        run: chmod +x gradlew

      - name: Build macOS Native Executable
        run: ./gradlew nativeCompile

      - name: Rename macOS Executable
        run: |
          cp "build/native/nativeCompile/TheLegendOfBelga" "build/TheLegendOfBelga-macOS"
          chmod +x "build/TheLegendOfBelga-macOS"

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TheLegendOfBelga-macOS
          path: build/TheLegendOfBelga-macOS
          retention-days: 30

  build-jar:
    name: Build JAR File
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Gradle wrapper perms
        run: chmod +x gradlew

      - name: Build JAR
        run: ./gradlew clean jar

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TheLegendOfBelga-JAR
          path: build/libs/*.jar
          retention-days: 30

  create-release-assets:
    name: Create Release Assets
    needs: [build-native-windows, build-native-linux, build-native-macos, build-jar]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List Downloaded Artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f

      - name: Create Release Assets Archive
        run: |
          cd artifacts
          mkdir -p release-assets
          
          # Copy Windows executable
          if [ -d "TheLegendOfBelga-Windows" ]; then
            cp TheLegendOfBelga-Windows/TheLegendOfBelga-Windows.exe release-assets/
          fi
          
          # Copy Linux executable
          if [ -d "TheLegendOfBelga-Linux" ]; then
            cp TheLegendOfBelga-Linux/TheLegendOfBelga-Linux release-assets/
          fi
          
          # Copy macOS executable
          if [ -d "TheLegendOfBelga-macOS" ]; then
            cp TheLegendOfBelga-macOS/TheLegendOfBelga-macOS release-assets/
          fi
          
          # Copy JAR files
          if [ -d "TheLegendOfBelga-JAR" ]; then
            cp TheLegendOfBelga-JAR/*.jar release-assets/
          fi
          
          # Create platform-specific archives
          if [ -f "release-assets/TheLegendOfBelga-Windows.exe" ]; then
            zip -r TheLegendOfBelga-Windows.zip release-assets/TheLegendOfBelga-Windows.exe
          fi
          
          if [ -f "release-assets/TheLegendOfBelga-Linux" ]; then
            tar -czf TheLegendOfBelga-Linux.tar.gz -C release-assets TheLegendOfBelga-Linux
          fi
          
          if [ -f "release-assets/TheLegendOfBelga-macOS" ]; then
            tar -czf TheLegendOfBelga-macOS.tar.gz -C release-assets TheLegendOfBelga-macOS
          fi
          
          # Create cross-platform archive
          tar -czf TheLegendOfBelga-All-Platforms.tar.gz release-assets/

      - name: Upload Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: Release-Assets
          path: artifacts/*.zip,artifacts/*.tar.gz
          retention-days: 30
