name: Build & Release (JAR + Native Executables)

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write

# Avoid double-runs if multiple pushes happen quickly
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Job 1: Build, Test, and Create JAR
  build-test-jar:
    name: Build, Test & Create JAR
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Gradle wrapper perms
        run: chmod +x gradlew

      - name: Run Tests
        run: ./gradlew test

      - name: Resolve & bump version (0.0.X)
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags

          # Read current Gradle version
          CURR="$(./gradlew -q properties | awk -F': ' '/^version: /{print $2}')"
          echo "Current Gradle version: ${CURR}"

          # Extract numeric MAJOR.MINOR.PATCH (strip -SNAPSHOT etc.)
          NUM="$(echo "$CURR" | sed -E 's/[^0-9.].*$//')"
          IFS='.' read -r MAJ MIN PATCH <<< "${NUM:-0.0.0}"
          MAJ=${MAJ:-0}; MIN=${MIN:-0}; PATCH=${PATCH:-0}

          # Find latest existing tag for MAJ.MIN.*
          LATEST_TAG_PATCH="$(git tag -l "v${MAJ}.${MIN}.*" \
            | sed -E "s/^v${MAJ}\.${MIN}\.([0-9]+).*$/\1/" \
            | sort -n | tail -1 || true)"
          LATEST_TAG_PATCH=${LATEST_TAG_PATCH:-0}

          # Next patch = max(current patch, latest tag patch) + 1
          if [ "${PATCH}" -gt "${LATEST_TAG_PATCH}" ]; then
            NEXT_PATCH=$((PATCH + 1))
          else
            NEXT_PATCH=$((LATEST_TAG_PATCH + 1))
          fi

          NEW_VERSION="${MAJ}.${MIN}.${NEXT_PATCH}"
          echo "Bumping to: ${NEW_VERSION}"
          echo "VERSION=${NEW_VERSION}" >> "$GITHUB_ENV"

          # Only rewrite files if needed
          if [ "$CURR" != "$NEW_VERSION" ]; then
            UPDATED=0
            if [ -f gradle.properties ]; then
              sed -i -E "s/^version\s*=.*/version=${NEW_VERSION}/" gradle.properties && UPDATED=1
            fi
            if [ -f build.gradle ]; then
              # Groovy DSL
              if grep -qE "^[[:space:]]*version[[:space:]]*=" build.gradle; then
                sed -i -E "s/^[[:space:]]*version[[:space:]]*=.*/version = '${NEW_VERSION}'/" build.gradle && UPDATED=1
              fi
            fi
            if [ -f build.gradle.kts ]; then
              # Kotlin DSL
              if grep -qE "^[[:space:]]*version[[:space:]]*=" build.gradle.kts; then
                sed -i -E "s/^[[:space:]]*version[[:space:]]*=.*/version = \"${NEW_VERSION}\"/" build.gradle.kts && UPDATED=1
              fi
            fi

            if [ "$UPDATED" -ne 1 ]; then
              echo "ERROR: Could not update version in Gradle files."
              exit 1
            fi

            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "chore: bump version to ${NEW_VERSION} [skip ci]"
            git push
          fi

      - name: Build JAR
        run: ./gradlew clean jar

      - name: Create & push tag if missing
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags
          if git rev-parse "v${VERSION}" >/dev/null 2>&1; then
            echo "Tag v${VERSION} already exists"
          else
            git tag -a "v${VERSION}" -m "v${VERSION}"
            git push origin "v${VERSION}"
          fi

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TheLegendOfBelga-JAR
          path: build/libs/*.jar
          retention-days: 30

  # Job 2: Build Windows Native Executable (runs in parallel)
  build-native-windows:
    name: Build Windows Native Executable
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Native Image
        run: gu install native-image

      - name: Gradle wrapper perms
        run: chmod +x gradlew

      - name: Build Windows Native Executable
        run: ./gradlew nativeCompile

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TheLegendOfBelga-Windows
          path: build/native/nativeCompile/TheLegendOfBelga.exe
          retention-days: 30

  # Job 3: Build macOS Native Executable (runs in parallel)
  build-native-macos:
    name: Build macOS Native Executable
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Native Image
        run: gu install native-image

      - name: Gradle wrapper perms
        run: chmod +x gradlew

      - name: Build macOS Native Executable
        run: ./gradlew nativeCompile

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TheLegendOfBelga-macOS
          path: build/native/nativeCompile/TheLegendOfBelga
          retention-days: 30

  # Job 4: Build Linux Native Executable (runs in parallel)
  build-native-linux:
    name: Build Linux Native Executable
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Native Image
        run: gu install native-image

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libz-dev zlib1g-dev

      - name: Gradle wrapper perms
        run: chmod +x gradlew

      - name: Build Linux Native Executable
        run: ./gradlew nativeCompile

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TheLegendOfBelga-Linux
          path: build/native/nativeCompile/TheLegendOfBelga
          retention-days: 30

  # Job 5: Create Release with All Assets (waits for all builds to complete)
  create-release:
    name: Create Release with All Assets
    needs: [build-test-jar, build-native-windows, build-native-linux, build-native-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List Downloaded Artifacts
        run: |
          echo "Available artifacts:"
          find artifacts -type f

      - name: Create Release with All Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build-test-jar.outputs.version }}
          name: Release v${{ needs.build-test-jar.outputs.version }}
          files: |
            artifacts/TheLegendOfBelga-JAR/*.jar
            artifacts/TheLegendOfBelga-Windows/TheLegendOfBelga.exe
            artifacts/TheLegendOfBelga-Linux/TheLegendOfBelga
            artifacts/TheLegendOfBelga-macOS/TheLegendOfBelga
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
          body: |
            ## üéÆ The Legend of Belga v${{ needs.build-test-jar.outputs.version }}
            
            ### üì¶ Downloads
            
            **Java JAR (requires Java 21):**
            - Download the JAR file if you have Java installed
            
            **Native Executables (no Java required):**
            - **Windows**: Download `TheLegendOfBelga.exe` - runs without Java!
            - **Linux**: Download `TheLegendOfBelga` - runs without Java!
            - **macOS**: Download `TheLegendOfBelga` - runs without Java!
            
            ### üöÄ Benefits of Native Executables
            
            - ‚úÖ **No Java installation required**
            - ‚úÖ **Faster startup time**
            - ‚úÖ **Better performance**
            - ‚úÖ **Single file distribution**
            
            ### üìã System Requirements
            
            **Native Executables:**
            - Windows 10+ (64-bit)
            - Linux (64-bit) with glibc 2.17+
            - macOS 10.15+ (64-bit)
            
            **JAR File:**
            - Java 21 or later
            
            ### üîß Installation
            
            **Windows:**
            - Download `TheLegendOfBelga.exe`
            - Double-click to run (no installation needed)
            
            **Linux:**
            - Download `TheLegendOfBelga`
            - Make executable: `chmod +x TheLegendOfBelga`
            - Run: `./TheLegendOfBelga`
            
            **macOS:**
            - Download `TheLegendOfBelga`
            - Make executable: `chmod +x TheLegendOfBelga`
            - Run: `./TheLegendOfBelga`
            
            ### üìù Changelog
            
            See the commit history for detailed changes.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
