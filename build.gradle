plugins {
    id 'java'
    id 'application'
}

group = 'com.lhamacorp.games'
version = '0.0.56'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

// Build optimizations
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

// Memory settings for better performance
applicationDefaultJvmArgs = [
    '-Xms256m',
    '-Xmx1g',
    '-XX:+UseG1GC',
    '-XX:+OptimizeStringConcat'
]

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

application {
    mainClass = 'com.lhamacorp.games.tlob.client.Game'
}

// Additional run task for headless core (no UI)
tasks.register('runCore', JavaExec) {
    group = 'application'
    description = 'Runs the headless core game (no UI)'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.lhamacorp.games.tlob.core.CoreGame'
    // forward all command line args to CoreGame
    args = project.hasProperty('appArgs') ? project.appArgs.split(',') : []
}

// Run the multiplayer server from Gradle
tasks.register('runServer', JavaExec) {
    group = 'application'
    description = 'Runs the multiplayer game server'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.lhamacorp.games.tlob.server.Server'

    // Support -Pport=7777 and optional -Pseed=123
    def portProp = project.findProperty('port')
    def seedProp = project.findProperty('seed')

    if (portProp != null && portProp.toString().trim()) {
        args portProp.toString().trim()
        if (seedProp != null && seedProp.toString().trim()) {
            args seedProp.toString().trim()
        }
    } else if (seedProp != null && seedProp.toString().trim()) {
        // Port not provided, but seed provided -> use default port 7777 and then seed
        args '7777', seedProp.toString().trim()
    } else {
        // No props -> default port only
        args '7777'
    }
}

jar {
    archiveBaseName.set('TheLegendOfBelga')
    archiveVersion.set('')

    manifest {
        attributes(
                'Main-Class': application.mainClass,
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

processResources {
    filesMatching("version.properties") {
        expand(version: project.version)
    }
}