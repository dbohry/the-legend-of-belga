plugins {
    id 'java'
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.9.28'
}

group = 'com.lhamacorp.games'
version = '0.0.69'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

application {
    mainClass = 'com.lhamacorp.games.tlob.client.Game'
}

tasks.register('runCore', JavaExec) {
    group = 'application'
    description = 'Runs the headless core game (no UI)'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.lhamacorp.games.tlob.core.CoreGame'
    // forward all command line args to CoreGame
    args = project.hasProperty('appArgs') ? project.appArgs.split(',') : []
}

tasks.register('runServer', JavaExec) {
    group = 'application'
    description = 'Runs the multiplayer game server'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.lhamacorp.games.tlob.server.Server'

    // Support -Pport=7777 and optional -Pseed=123
    def portProp = project.findProperty('port')
    def seedProp = project.findProperty('seed')

    if (portProp != null && portProp.toString().trim()) {
        args portProp.toString().trim()
        if (seedProp != null && seedProp.toString().trim()) {
            args seedProp.toString().trim()
        }
    } else if (seedProp != null && seedProp.toString().trim()) {
        // Port not provided, but seed provided -> use default port 7777 and then seed
        args '7777', seedProp.toString().trim()
    } else {
        // No props -> default port only
        args '7777'
    }
}

jar {
    archiveBaseName.set('TheLegendOfBelga')
    archiveVersion.set('')

    manifest {
        attributes(
                'Main-Class': application.mainClass,
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

processResources {
    filesMatching("version.properties") {
        expand(version: project.version)
    }
}

// Native Image configuration
graalvmNative {
    binaries {
        executable {
            mainClass = application.mainClass
            imageName = 'TheLegendOfBelga'
            buildArgs.add('--no-fallback')
            buildArgs.add('--enable-http')
            buildArgs.add('--enable-https')
            buildArgs.add('--enable-all-security-services')
            buildArgs.add('--initialize-at-build-time=com.lhamacorp.games.tlob.client.Game')
            buildArgs.add('--initialize-at-build-time=com.lhamacorp.games.tlob.client.managers')
            buildArgs.add('--initialize-at-build-time=com.lhamacorp.games.tlob.client.entities')
            buildArgs.add('--initialize-at-build-time=com.lhamacorp.games/tlob.client.maps')
            buildArgs.add('--initialize-at-build-time=com.lhamacorp.games.tlob.client.perks')
            buildArgs.add('--initialize-at-build-time=com.lhamacorp.games.tlob.client.save')
            buildArgs.add('--initialize-at-build-time=com.lhamacorp.games.tlob.client.weapons')
            buildArgs.add('--initialize-at-build-time=com.lhamacorp.games.tlob.client.world')
            buildArgs.add('--initialize-at-build-time=com.lhamacorp.games.tlob.core')
            buildArgs.add('--initialize-at-build-time=com.lhamacorp.games.tlob.server')
            buildArgs.add('--report-unsupported-elements-at-runtime')
            buildArgs.add('--allow-incomplete-classpath')
            buildArgs.add('--no-server')

            // Platform-specific configurations
            if (System.getProperty('os.name').toLowerCase().contains('windows')) {
                buildArgs.add('--windows-console-mode=auto')
            }

            // Resource handling
            buildArgs.add('--include-resources=assets/.*')
            buildArgs.add('--include-resources=version.properties')
        }
    }
}

tasks.register('buildNativeMac', Exec) {
    group = 'native'
    description = 'Builds native macOS executable'
    dependsOn 'nativeCompile'

    commandLine 'bash', '-c',
            "cp ${buildDir}/native/nativeCompile/TheLegendOfBelga ${buildDir}/TheLegendOfBelga-macOS"
}